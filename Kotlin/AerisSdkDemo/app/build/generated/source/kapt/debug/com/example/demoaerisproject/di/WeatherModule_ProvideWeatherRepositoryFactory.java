// Generated by Dagger (https://dagger.dev).
package com.example.demoaerisproject.di;

import android.content.Context;
import com.example.demoaerisproject.data.weather.WeatherRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata("dagger.hilt.android.qualifiers.ApplicationContext")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class WeatherModule_ProvideWeatherRepositoryFactory implements Factory<WeatherRepository> {
  private final Provider<Context> contextProvider;

  public WeatherModule_ProvideWeatherRepositoryFactory(Provider<Context> contextProvider) {
    this.contextProvider = contextProvider;
  }

  @Override
  public WeatherRepository get() {
    return provideWeatherRepository(contextProvider.get());
  }

  public static WeatherModule_ProvideWeatherRepositoryFactory create(
      Provider<Context> contextProvider) {
    return new WeatherModule_ProvideWeatherRepositoryFactory(contextProvider);
  }

  public static WeatherRepository provideWeatherRepository(Context context) {
    return Preconditions.checkNotNullFromProvides(WeatherModule.INSTANCE.provideWeatherRepository(context));
  }
}
