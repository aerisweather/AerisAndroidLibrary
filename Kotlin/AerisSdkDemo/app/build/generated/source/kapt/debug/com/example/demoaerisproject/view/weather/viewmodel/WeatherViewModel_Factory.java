// Generated by Dagger (https://dagger.dev).
package com.example.demoaerisproject.view.weather.viewmodel;

import android.content.Context;
import com.example.demoaerisproject.data.preferenceStore.PrefStoreRepository;
import com.example.demoaerisproject.data.room.MyPlaceRepository;
import com.example.demoaerisproject.data.weather.WeatherRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata("dagger.hilt.android.qualifiers.ApplicationContext")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class WeatherViewModel_Factory implements Factory<WeatherViewModel> {
  private final Provider<Context> contextProvider;

  private final Provider<WeatherRepository> weatherRepositoryProvider;

  private final Provider<MyPlaceRepository> myPlaceRepositoryProvider;

  private final Provider<PrefStoreRepository> prefStoreRepositoryProvider;

  public WeatherViewModel_Factory(Provider<Context> contextProvider,
      Provider<WeatherRepository> weatherRepositoryProvider,
      Provider<MyPlaceRepository> myPlaceRepositoryProvider,
      Provider<PrefStoreRepository> prefStoreRepositoryProvider) {
    this.contextProvider = contextProvider;
    this.weatherRepositoryProvider = weatherRepositoryProvider;
    this.myPlaceRepositoryProvider = myPlaceRepositoryProvider;
    this.prefStoreRepositoryProvider = prefStoreRepositoryProvider;
  }

  @Override
  public WeatherViewModel get() {
    return newInstance(contextProvider.get(), weatherRepositoryProvider.get(), myPlaceRepositoryProvider.get(), prefStoreRepositoryProvider.get());
  }

  public static WeatherViewModel_Factory create(Provider<Context> contextProvider,
      Provider<WeatherRepository> weatherRepositoryProvider,
      Provider<MyPlaceRepository> myPlaceRepositoryProvider,
      Provider<PrefStoreRepository> prefStoreRepositoryProvider) {
    return new WeatherViewModel_Factory(contextProvider, weatherRepositoryProvider, myPlaceRepositoryProvider, prefStoreRepositoryProvider);
  }

  public static WeatherViewModel newInstance(Context context, WeatherRepository weatherRepository,
      MyPlaceRepository myPlaceRepository, PrefStoreRepository prefStoreRepository) {
    return new WeatherViewModel(context, weatherRepository, myPlaceRepository, prefStoreRepository);
  }
}
