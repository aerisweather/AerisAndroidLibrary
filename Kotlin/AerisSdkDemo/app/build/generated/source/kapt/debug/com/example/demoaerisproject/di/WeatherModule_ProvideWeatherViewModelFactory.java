// Generated by Dagger (https://dagger.dev).
package com.example.demoaerisproject.di;

import android.content.Context;
import com.example.demoaerisproject.data.preferenceStore.PrefStoreRepository;
import com.example.demoaerisproject.data.room.MyPlaceRepository;
import com.example.demoaerisproject.data.weather.WeatherRepository;
import com.example.demoaerisproject.view.weather.viewmodel.WeatherViewModel;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata("dagger.hilt.android.qualifiers.ApplicationContext")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class WeatherModule_ProvideWeatherViewModelFactory implements Factory<WeatherViewModel> {
  private final Provider<Context> contextProvider;

  private final Provider<WeatherRepository> weatherRepositoryProvider;

  private final Provider<MyPlaceRepository> myPlaceRepositoryProvider;

  private final Provider<PrefStoreRepository> prefStoreRepositoryProvider;

  public WeatherModule_ProvideWeatherViewModelFactory(Provider<Context> contextProvider,
      Provider<WeatherRepository> weatherRepositoryProvider,
      Provider<MyPlaceRepository> myPlaceRepositoryProvider,
      Provider<PrefStoreRepository> prefStoreRepositoryProvider) {
    this.contextProvider = contextProvider;
    this.weatherRepositoryProvider = weatherRepositoryProvider;
    this.myPlaceRepositoryProvider = myPlaceRepositoryProvider;
    this.prefStoreRepositoryProvider = prefStoreRepositoryProvider;
  }

  @Override
  public WeatherViewModel get() {
    return provideWeatherViewModel(contextProvider.get(), weatherRepositoryProvider.get(), myPlaceRepositoryProvider.get(), prefStoreRepositoryProvider.get());
  }

  public static WeatherModule_ProvideWeatherViewModelFactory create(
      Provider<Context> contextProvider, Provider<WeatherRepository> weatherRepositoryProvider,
      Provider<MyPlaceRepository> myPlaceRepositoryProvider,
      Provider<PrefStoreRepository> prefStoreRepositoryProvider) {
    return new WeatherModule_ProvideWeatherViewModelFactory(contextProvider, weatherRepositoryProvider, myPlaceRepositoryProvider, prefStoreRepositoryProvider);
  }

  public static WeatherViewModel provideWeatherViewModel(Context context,
      WeatherRepository weatherRepository, MyPlaceRepository myPlaceRepository,
      PrefStoreRepository prefStoreRepository) {
    return Preconditions.checkNotNullFromProvides(WeatherModule.INSTANCE.provideWeatherViewModel(context, weatherRepository, myPlaceRepository, prefStoreRepository));
  }
}
